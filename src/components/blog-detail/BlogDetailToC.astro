---

---

<div class="h-full mt-1">
  <div class="bg-gray-50 rounded-lg px-4 py-8 h-full flex flex-col gap-5">
    <div class="flex items-center justify-between">
      <h2 class="!text-2xl font-semibold text-gray-800">Table of Contents</h2>
    </div>

    <nav id="toc-content" class="flex flex-col gap-1">
      <!-- TOC will be generated by JavaScript -->
    </nav>
  </div>
</div>

<script>
  interface TocItem {
    id: string;
    text: string;
    level: number;
    children: TocItem[];
    element: HTMLElement;
  }

  function buildTocTree(headings: NodeListOf<Element>): TocItem[] {
    const items: TocItem[] = [];
    const stack: TocItem[] = [];

    headings.forEach((heading, index) => {
      const id = `heading-${index}`;
      heading.id = id;

      const level = parseInt(heading.tagName.charAt(1));
      const item: TocItem = {
        id,
        text: heading.textContent || '',
        level,
        children: [],
        element: heading as HTMLElement,
      };

      while (stack.length > 0 && stack[stack.length - 1].level >= level) stack.pop();

      if (stack.length === 0) {
        items.push(item);
      } else {
        stack[stack.length - 1].children.push(item);
      }

      stack.push(item);
    });

    return items;
  }

  function renderTocItems(items: TocItem[]): void {
    const tocContent = document.getElementById('toc-content');
    if (!tocContent) return;

    (window as any).tocItems = items;

    const event = new CustomEvent('tocDataReady', { detail: { items } });
    document.dispatchEvent(event);
  }

  function generateTOC() {
    const content = document.getElementById('article-content');
    const tocContent = document.getElementById('toc-content');

    if (!content || !tocContent) return;

    const headings = content.querySelectorAll('h1, h2, h3, h4, h5, h6');

    if (headings.length === 0) {
      return;
    }

    const tocTree = buildTocTree(headings);
    renderTocItems(tocTree);
  }

  function renderTocWithComponents(items: TocItem[]) {
    const tocContent = document.getElementById('toc-content');
    if (!tocContent) return;

    tocContent.innerHTML = '';

    items.forEach((item) => {
      const itemElement = createTocItemElement(item, 0);
      tocContent.appendChild(itemElement);
    });
  }

  function createTocItemElement(item: TocItem, baseIndent: number): HTMLElement {
    const indent = baseIndent * 20;

    const container = document.createElement('div');
    container.className = 'toc-item flex flex-col gap-2';
    container.style.marginLeft = `${indent}px`;

    const link = document.createElement('a');
    link.href = `#${item.id}`;
    link.textContent = item.text;
    link.className =
      'block py-1 px-2 text-md text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded transition-colors';

    container.appendChild(link);

    if (item.children.length > 0) {
      item.children.forEach((child) => {
        const childElement = createTocItemElement(child, baseIndent + 1);
        container.appendChild(childElement);
      });
    }

    return container;
  }

  function setupSmoothScroll() {
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (target && target.matches && target.matches('#toc-content a')) {
        e.preventDefault();
        const href = target.getAttribute('href');
        if (href) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          }
        }
      }
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    generateTOC();
    setupSmoothScroll();
  });

  document.addEventListener('tocDataReady', (e: any) => {
    const { items } = e.detail;
    renderTocWithComponents(items);
  });
</script>
